apply plugin: libs.plugins.androidLibrary.get().pluginId
apply plugin: libs.plugins.kotlinAndroid.get().pluginId
apply plugin: libs.plugins.kotlinParcelize.get().pluginId

android {
    compileSdk Android.compileSdk

    defaultConfig {
        minSdk Android.minSdk
        targetSdk Android.targetSdk
        versionCode Android.versionCode
        versionName Android.versionName
        testInstrumentationRunner libs.plugins.hiltTestRunner.get().pluginId
        vectorDrawables.useSupportLibrary true
        consumerProguardFiles "consumer-proguard-rules.pro"
    }

    buildTypes {
        debug {
            minifyEnabled false
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_17
        freeCompilerArgs = ["-Xstring-concat=inline"]
    }

    kotlin {
        sourceSets {
            main.kotlin.srcDirs += 'build/generated/ksp/main/kotlin'
            test.kotlin.srcDirs += 'build/generated/ksp/test/kotlin'
        }
    }

    lint {
        checkDependencies true
    }

    sourceSets {
        getByName("test").resources.srcDir("src/test/res")
    }

    testOptions {
        // Fix for mock issue on >= API 28
        packaging.jniLibs.useLegacyPackaging = true

        unitTests {
        // To prevent textUtils error with espresso idling resource
        returnDefaultValues = true
        includeAndroidResources = true

            all {
                afterSuite { desc, result ->
                    if (!desc.parent) {
                        println "\n======================================================================="
                        println "${desc.displayName}"
                        println "Test result: ${result.resultType}"
                        println "Test summary: ${result.testCount} tests, " +
                                "${result.successfulTestCount} succeeded, " +
                                "${result.failedTestCount} failed, " +
                                "${result.skippedTestCount} skipped"
                        println "======================================================================="
                    }
                }

                testLogging {
                    showStandardStreams = true
                    events "passed", "skipped", "failed", "standardOut", "standardError"
                }
            }
        }
    }
}

dependencies {
    implementation(libs.timber)
}